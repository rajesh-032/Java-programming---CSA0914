import java.util.Scanner;

class Customer {
    private String accountNo;
    private String accName;
    private double balance;

    // Constructor
    public Customer(String accountNo, String accName, double initialBalance) {
        this.accountNo = accountNo;
        this.accName = accName;
        this.balance = initialBalance;
    }

    // Synchronized deposit method
    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: Rs. " + amount);
        System.out.println("Current Balance: Rs. " + balance);
        notify(); // Notify waiting thread
    }

    // Synchronized withdraw method
    public synchronized void withdraw(double amount) {
        while (amount > balance) {
            System.out.println("Insufficient balance! Waiting for deposit...");
            try {
                wait(); // Wait for deposit
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Withdraw interrupted.");
            }
        }
        balance -= amount;
        System.out.println("Withdrawn: Rs. " + amount);
        System.out.println("Current Balance: Rs. " + balance);
    }
}

class WithdrawThread extends Thread {
    private Customer customer;
    private double amount;

    public WithdrawThread(Customer customer, double amount) {
        this.customer = customer;
        this.amount = amount;
    }

    public void run() {
        customer.withdraw(amount);
    }
}

class DepositThread extends Thread {
    private Customer customer;
    private double amount;

    public DepositThread(Customer customer, double amount) {
        this.customer = customer;
        this.amount = amount;
    }

    public void run() {
        customer.deposit(amount);
    }
}

public class BankSimulation {
    public static void main(String[] args) {
        Customer customer = new Customer("123456", "John Doe", 10000.00);

        // Input withdrawal amount
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter amount to withdraw: Rs. ");
        double withdrawAmount = scanner.nextDouble();

        // Create and start withdrawal thread
        WithdrawThread withdrawThread = new WithdrawThread(customer, withdrawAmount);
        withdrawThread.start();

        // Simulate deposit after some time (for demonstration)
        try {
            Thread.sleep(2000); // Simulate time delay before deposit
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Input deposit amount
        System.out.print("Enter amount to deposit: Rs. ");
        double depositAmount = scanner.nextDouble();

        // Create and start deposit thread
        DepositThread depositThread = new DepositThread(customer, depositAmount);
        depositThread.start();

        // Close the scanner
        scanner.close();
    }
}
