class MultiplicationTable extends Thread {
    private int number;

    // Constructor
    public MultiplicationTable(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        System.out.println("Thread for " + number + " started.");
        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " x " + i + " = " + (number * i));
            try {
                // Simulate some work with sleep
                Thread.sleep(500);
            } catch (InterruptedException e) {
                System.out.println("Thread for " + number + " interrupted.");
            }
        }
        System.out.println("Thread for " + number + " terminated.");
    }
}

public class MultiplicationTableDemo {
    public static void main(String[] args) {
        // Create threads for 5 and 10
        MultiplicationTable tableFor5 = new MultiplicationTable(5);
        MultiplicationTable tableFor10 = new MultiplicationTable(10);

        // Start the threads
        System.out.println("Starting thread for 5...");
        tableFor5.start(); // NEW -> RUNNABLE

        System.out.println("Starting thread for 10...");
        tableFor10.start(); // NEW -> RUNNABLE

        // Wait for both threads to complete
        try {
            tableFor5.join(); // Ensures main thread waits for tableFor5 to finish
            tableFor10.join(); // Ensures main thread waits for tableFor10 to finish
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Both multiplication tables displayed.");
    }
}
